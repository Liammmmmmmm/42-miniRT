
void	add_all_light_contribution(hit_record hit, vec3 view_dir, inout vec3 light_color)
{
	int	i;

	i = 0;
	while (i < lights_am)
	{
		if (lights[i].type == 0)
		{
			float shadow_factor = compute_shadow_factor(hit.point, lights[i]);
			if (shadow_factor > 0.0)
				add_plight(light_color, hit, lights[i], view_dir, shadow_factor);
		}
		else if (lights[i].type == 1)
		{
			if (check_dlight_hit_dir(hit.point, -lights[i].pos) == false)
				add_dlight(light_color, hit, lights[i], view_dir);
		}
		i++;
	}
}

vec3	compute_light(hit_record hit)
{
	vec3	light_color;
	vec3	view_dir;

	light_color = vec3(0.0);
	view_dir = normalize(cam.position - hit.point);
	add_all_light_contribution(hit, view_dir, light_color);
	return (light_color);
}