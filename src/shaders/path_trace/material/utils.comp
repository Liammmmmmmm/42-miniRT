
float	get_cos_theta(vec3 dir_in, vec3 normal)
{
	return (-dot(normalize(dir_in), normal));
}

vec3	fresnel_schlick_color(float cos_theta, vec3 f0)
{
	return (f0 + (vec3(1.0) - f0) * pow(1 - cos_theta, 5.0));
}

float	fresnel_schlick_f(float cos_theta, float f0)
{
	return (f0 + ((1 - f0) * pow(1 - cos_theta, 5.0)));
}

float	get_reflect_value(vec3 dir_in, hit_record hit)
{
	return (fresnel_schlick_f(
			get_cos_theta(dir_in, hit.normal),
			pow((materials[hit.material_id].ior - 1)
				/ (materials[hit.material_id].ior + 1), 2.0)
		)
	);
}

vec3	ggx_sample_hemisphere(vec3 normal, float roughness)
{
	vec3	tangent;
	float	u2;
	float	phi;
	float	cos_theta;
	float	sin_theta;

	u2 = rand();
	phi = 2.0 * PI * rand();
	cos_theta = sqrt((1.0 - u2) / (1.0 + ((roughness * roughness) * (roughness * roughness) - 1.0) * u2));
	sin_theta = sqrt(1.0 - cos_theta * cos_theta);
	tangent = normalize(cross(normal, vec3(1.0, 0.0, 0.0)));
	if (dot(tangent, tangent) < 0.0001)
		tangent = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
	return (normal * cos_theta
		+ tangent * cos(phi) * sin_theta
		+ normalize(cross(normal, tangent)) * sin(phi) * sin_theta);
}