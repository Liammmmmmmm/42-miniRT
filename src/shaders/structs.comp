#version 430

// Suggestion pour la nomenclature :
// tout ce qui est objet on le met en PascalCase
// le reste (juste stocker de la data) on reste en mode snake case normal

struct Camera {
	vec3 position;
	float _pad1;
	vec3 orientation;
	float _pad2;
	float fov;
	float focus_dist;
	float defocus_angle;
	float _pad3;
};

struct Sphere {
	vec3 position;
	float radius;
	vec3 color;
	int material_id;
};

struct Plane {
	vec3 position;
	int material_id;
	vec3 normal;
	float d;
	vec3 color;
};

struct Hyper {
	vec3	position;
	int material_id;
	vec3 orientation;
	float	height;
	vec3	color;
	float	a;
	float	b;
	float	c;
	float	shape;
};

struct	Cone {
	vec3	position;
	int material_id;
	vec3 orientation;
	float	diameter;
	vec3	color;
	float	height;
	int material_id_top;
};

struct	Cylinder {
	vec3	position;
	int material_id;
	vec3 orientation;
	float	diameter;
	vec3	color;
	int material_id_top;
	int material_id_bot;
};

struct	Vertex {
	vec3	pos[3];
	float	u;
	vec3	normal[3];
	float	v;
};

struct	Triangle {
	Vertex	v0;
	Vertex	v1;
	Vertex	v2;
	vec3		color;
	int			material_id;
	vec3		center;
	int			obj_id;
};

struct Viewport {
	float	focal_length;
	float	height;
	float	width;
	int		render_w;
	int		render_h;
	float	gamma;
	float	defocus_radius;
	int		max_bounces;
	vec3	u;
	float	ior_global;
	vec3	v;
	vec3	pixel_delta_u;
	vec3	pixel_delta_v;
	vec3	upper_left;
	vec3	pixel00_loc;
	vec3	defocus_disk_u;
	vec3	defocus_disk_v;
};

struct Material {
	vec3	color_value;
	int		albedo_tex_index;
	float	metallic_value;
	int		metallic_tex_index;
	float	roughness_value;
	int		roughness_tex_index;
	float	ior;
	float	transmission_value;
	int		transmission_tex_index;
	float	ao_value;
	int		ao_tex_index;
	float	emission_strength;
	int		emission_strength_tex_index;
	float	scale;
	vec3	emission_color;
	int		emission_color_tex_index;
	int		normal_tex_index;
	float	normal_intensity;
};

struct hit_record
{
	vec3		point;
	float		t;
	vec3		normal;
	int			material_id;
	vec3		color;
	bool		front_face;
	float		u;
	float		v;
	int			part_id;
};

struct quadratic
{
	float	a;
	float	b;
	float	c;
	float	disc;
	float	t0;
	float	t1;
	float	t_hit;
	float	t_hit2;
	float	dd;
	float	oo;
};

struct	aabb
{
	vec3	min;
	vec3	max;
};

struct	bvh_node
{
	aabb	node_bounds;
  uint  left_child;
	uint  right_child;
	uint	first_prim;
	uint	prim_count;
	bool	is_leaf;
};
