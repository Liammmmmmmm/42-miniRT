float distance_squared(vec3 a, vec3 b) {
    return dot(a - b, a - b);
}

uint hash_cell(ivec3 cell_idx, int table_size) {
    const uint p1 = 73856093u;
    const uint p2 = 19349663u;
    const uint p3 = 83492791u;
    uint n = (uint(cell_idx.x) * p1) ^ (uint(cell_idx.y) * p2) ^ (uint(cell_idx.z) * p3);
    return (n % uint(table_size));
}

void knn_add_result(vec3 photon_power, inout KNNSearch search, float dist_sq) {
    if (search.count < search.k) {
        search.results[search.count].power = photon_power;
        search.results[search.count].dist_sq = dist_sq;
        if (dist_sq > search.farthest_dist_sq) {
            search.farthest_dist_sq = dist_sq;
        }
        search.count++;
    } else if (dist_sq < search.farthest_dist_sq) {

        uint farthest_idx = 0;
        search.farthest_dist_sq = search.results[0].dist_sq;
        for (uint i = 1; i < search.k; i++) {
            if (search.results[i].dist_sq > search.farthest_dist_sq) {
                farthest_idx = i;
                search.farthest_dist_sq = search.results[i].dist_sq;
            }
        }
        search.results[farthest_idx].power = photon_power;
        search.results[farthest_idx].dist_sq = dist_sq;

        search.farthest_dist_sq = search.results[0].dist_sq;
        for (uint i = 1; i < search.k; i++) {
            if (search.results[i].dist_sq > search.farthest_dist_sq) {
                search.farthest_dist_sq = search.results[i].dist_sq;
            }
        }
    }
}

vec3 get_caustic(hit_record hit) {
    const uint MAX_PHOTONS_TO_TEST = 500;
    uint photons_tested = 0;

    KNNSearch search;
    search.k = 10;
    search.count = 0;
    search.farthest_dist_sq = 10000000.0;

    if (table_size == 0) {
        return vec3(0.0);
    }

    ivec3 center_cell_idx = ivec3(floor((hit.point - grid_world_min) / cell_size));

    for (int z = -1; z <= 1; z++) {
        for (int y = -1; y <= 1; y++) {
            for (int x = -1; x <= 1; x++) {
                if (photons_tested >= MAX_PHOTONS_TO_TEST) break;

                uint hash = hash_cell(center_cell_idx + ivec3(x, y, z), table_size);
                Cell cell = cells[hash];

                for (uint i = 0; i < cell.count; i++) {
                    if (photons_tested >= MAX_PHOTONS_TO_TEST) break;

                    uint photon_idx = photons_indices[cell.start_index + i];
                    Photon p = photons[photon_idx];
                    float dist_sq = distance_squared(p.position.xyz, hit.point);
                    knn_add_result(p.color, search, dist_sq);
                    photons_tested++;
                }
            }
            if (photons_tested >= MAX_PHOTONS_TO_TEST) break;
        }
        if (photons_tested >= MAX_PHOTONS_TO_TEST) break;
    }

    if (search.count < search.k) {
        return vec3(0.0);
    }

    vec3 final_color = vec3(0.0);
    for (uint i = 0; i < search.k; i++) {
        final_color += search.results[i].power;
    }

    float radius_sq = search.farthest_dist_sq;
    if (radius_sq > 0.0001) {
        return final_color * (1.0 / (3.14159265 * radius_sq));
    }

    return vec3(0.0);
}
