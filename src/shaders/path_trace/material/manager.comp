

void	material_manager_v4(inout vec3 rd, hit_record hit, inout vec3 power, inout vec3 accumulation)
{
	if (hit.material_id == -1)
	{
		material_default(rd, hit, power, accumulation);
		return ;
	}
	if (materials[hit.material_id].emission_strength > 0)
	{
		accumulation += materials[hit.material_id].emission_strength
						* materials[hit.material_id].emission_color * power;
	}
	if (materials[hit.material_id].metallic_value == 1)
	{
		metallic_color(rd, hit, power);
		return ;
	}
	material_default(rd, hit, power, accumulation);
		return ;
}

// void	material_manager_v3(t_minirt *minirt, t_ray *ray,
// 	t_hit_record *hit_record, t_ray_data data)
// {
// 	if (hit_record->mat->metallic_value == 1.0)
// 		metallic_color(ray, hit_record, data.power);
// 	else if (hit_record->mat->metallic_value == 0.0)
// 		dielectric_mat(minirt, ray, hit_record, data);
// 	else if (hit_record->mat->metallic_value > random_double())
// 		metallic_color(ray, hit_record, data.power);
// 	else
// 		dielectric_mat(minirt, ray, hit_record, data);
// }