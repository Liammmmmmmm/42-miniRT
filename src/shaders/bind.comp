layout(local_size_x = 8, local_size_y = 8) in;

layout(std430, binding = 0) buffer Output {
	vec3 data[];
};

layout(std140, binding = 1) buffer ViewportBuffer {
	Viewport viewport;
};

layout(std140, binding = 2) buffer CameraBuffer {
	Camera cam;
};

layout(std430, binding = 3) buffer MaterialBuffer {
  Material materials[];
};

layout(std430, binding = 4) buffer BvhNodes {
    bvh_node bvh_nodes[];
};

layout(std430, binding = 5) buffer PrimitiveIndices {
    uint prim_indices[];
};

layout(std430, binding = 6) buffer PrimitiveTypes {
    uint prim_types[];
};

layout(std430, binding = 7) buffer SphereBuffer {
	Sphere spheres[];
};

layout(std430, binding = 8) buffer PlaneBuffer {
    Plane planes[];
};

layout(std430, binding = 9) buffer HyperBuffer {
    Hyper hypers[];
};

layout(std430, binding = 10) buffer CylinderBuffer {
    Cylinder cylinders[];
};

layout(std430, binding = 11) buffer ConeBuffer {
		Cone cones[];
};

layout(std430, binding = 12) buffer TriangleBuffer {
  	Triangle triangles[];
};


uniform uint width_render;
uniform uint height_render;

uniform uint spheres_am;
uniform uint planes_am;
uniform uint cylinders_am;
uniform uint cones_am;
uniform uint hypers_am;
uniform uint triangles_am;

uniform uint max_bounces;

uniform uint sample_count;

uint	g_seed = 0;

const float PI = 3.14159265358979323846;
const float IT_MAX = 1000.0;
const float IT_MIN = 0.001;
const float MIN_SCALE = 1e-3;